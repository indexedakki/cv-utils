# Python code to calculate OpenAI API cost based on token usage
from typing import Optional

from logger_setup import setup_logger
LOG_PATH = "logs/app.log"
logger = setup_logger(__name__, LOG_PATH)


def calculate_openai_cost(
    prompt_tokens: int,
    cached_prompt_tokens: int,
    completion_tokens: int,
    rate_non_cached_prompt_per_million: float,
    rate_cached_prompt_per_million: float,
    rate_completion_per_million: float,
    num_requests: int = 1
) -> tuple:
    """
    Calculate the total and average cost of OpenAI API usage.

    Parameters:
    - prompt_tokens: total input tokens
    - cached_prompt_tokens: number of tokens served from cache
    - completion_tokens: number of tokens generated by the model
    - rate_non_cached_prompt_per_million: price per 1M non-cached prompt tokens (USD)
    - rate_cached_prompt_per_million: price per 1M cached prompt tokens (USD)
    - rate_completion_per_million: price per 1M completion tokens (USD)
    - num_requests: number of API calls (default: 1)

    Returns:
    - total_cost: total cost in USD
    - average_cost_per_request: average cost per API call in USD
    """
    non_cached = prompt_tokens - cached_prompt_tokens

    cost_non_cached = non_cached * (rate_non_cached_prompt_per_million / 1e6)
    cost_cached = cached_prompt_tokens * (rate_cached_prompt_per_million / 1e6)
    cost_completion = completion_tokens * (rate_completion_per_million / 1e6)

    total_cost = cost_non_cached + cost_cached + cost_completion
    average_cost = total_cost / num_requests if num_requests else total_cost

    return total_cost, average_cost


def openai_cost(prompt_tokens: int, cached_prompt_tokens: int, completion_tokens: int, successful_requests: int):
    # Given metrics
    # total_tokens = 24023
    # prompt_tokens = 20637
    # cached_prompt_tokens = 12416
    # completion_tokens = 3386
    # successful_requests = 6

    # Pricing for example model (per million tokens)
    rate_non_cached = 0.40   # $0.40 per 1M non-cached prompt tokens
    rate_cached = 0.10       # $0.10 per 1M cached prompt tokens
    rate_completion = 1.60   # $1.60 per 1M completion tokens

    total, average = calculate_openai_cost(
        prompt_tokens,
        cached_prompt_tokens,
        completion_tokens,
        rate_non_cached,
        rate_cached,
        rate_completion,
        successful_requests
    )

    logger.info(f"Total cost: ${total:.8f}")
    logger.info(f"Average cost per request: ${average:.8f}")

# Example usage with the provided metrics
if __name__ == "__main__":
    openai_cost()
